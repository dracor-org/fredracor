#!/bin/bash
# This script is used to convert the original corpus to FreDraCor using multiple
# eXistDB instances in parallel. To spin up the databases podman is used when
# available, otherwise it falls back to docker.

usage () {
  cat <<EOF
FreDraCor conversion.
Transforms original source files in parallel processes.

Usage: $0 [options] SOURCE_DIR [TEI_DIR]

OPTIONS:
  -n, --num N     number of exist containers to spin up (default: 2)
  -p, --port N    port number of eXist database to use
  -D, --docker    use docker even when podman is available
  -P, --progress  enable a progress bar
  -t, --test      run only on a few files
  -v, --verbose   show more detailed output
  -h, --help      show this message

EOF
}

# options parsing inspired by
# https://medium.com/@Drew_Stokes/bash-argument-parsing-54f3b81a6a8f

PARAMS=""

while (( "$#" )); do
  case "$1" in
    -h|--help)
      usage
      exit 0
      ;;
    -D|--docker)
      USE_DOCKER=yes
      shift
      ;;
    -P|--progress)
      progress=yes
      shift
      ;;
    -T|--test)
      TEST_MODE=yes
      echo "TEST MODE ENABLED"
      shift
      ;;
    -v|--verbose)
      VERBOSE=1
      shift
      ;;
    -n|--num|--threads)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        re='^[2-6]$'
        if ! [[ $2 =~ $re ]]; then
          echo "Number of threads must be between 2 and 6!"
          exit 1
        fi
        THREADS=$2
        shift 2
      else
        echo "Error: Argument for $1 is missing" >&2
        exit 1
      fi
      ;;
    -p|--port)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        re='^[0-9]+$'
        if ! [[ $2 =~ $re ]]; then
          echo "Port argument must be a number!"
          exit 1
        fi
        PORT=$2
        shift 2
      else
        echo "Error: Argument for $1 is missing" >&2
        exit 1
      fi
      ;;
    -*|--*=) # unsupported flags
      echo "Error: Unsupported flag $1" >&2
      exit 1
      ;;
    *) # preserve positional arguments
      PARAMS="$PARAMS $1"
      shift
      ;;
  esac
done

# set positional arguments in their proper place
eval set -- "$PARAMS"

DOCKER=docker
if [ ! -z $(which podman) ] && [ -z $USE_DOCKER ]; then
  DOCKER=podman
elif [[ -z $(which docker) ]]; then
  echo "Cannot find docker executable. Aborting!"
  exit 1
fi

BASE_DIR=$(dirname $0)

SOURCE_DIR=${1:-$BASE_DIR/../theatre-classique/xml}
TEI_DIR=${2:-$BASE_DIR/tei}

if [[ ! -d $SOURCE_DIR ]]; then
  echo "Source directory '$SOURCE_DIR' not available!"
  echo "Make sure to checkout https://github.com/dracor-org/theatre-classique next to fredracor."
  echo
  exit 1
else
  echo "Using original files from: $SOURCE_DIR"
  echo "Original files found: $(ls $SOURCE_DIR/*.[xX][mM][lL] | wc -l)"
fi

if [[ ! -d $TEI_DIR ]]; then
  echo "Missing TEI directory!"
  echo "Usage: $0 [options] source_dir tei_dir"
  exit 1
else
  echo "Target directory: $TEI_DIR"
fi

# check git status of TEI_DIR
cd $TEI_DIR
if [[ $(git status --porcelain --untracked-files=no .) != '' ]]; then
  echo
  echo "Uncommitted changes in TEI directory ($TEI_DIR)!"
  echo 'Please make sure to commit or revert any changes before running a new conversion.'
  echo
  exit 1
fi
cd - > /dev/null

THREADS=${THREADS:-2}
echo "Threads: $THREADS"

PORTPREFIX="644"

CONTAINERS=() # put container ids here, to stop them afterwards
PORTS=()

if [[ -z $PORT ]]; then
  for i in $(seq 1 $THREADS); do
    port=$PORTPREFIX$i
    PORTS+=($port)
  done
else
  PORTS+=($PORT)
fi

echo ${PORTS[*]}

START=$(date +'%T')
echo $START

# interrupt
# get log from container
log () {
  date=$(date +'%F')
  logfile=$WORK_DIR/report-$date-$START.log
  for c in ${CONTAINERS[@]}; do
    $DOCKER logs $c >> $WORK_DIR/report-$date-$START.log
  done
  [ ${#CONTAINERS[@]} -gt 0 ] && [ -n "$VERBOSE" ] \
    && echo "Detailed log in $logfile"
}

stopContainer () {
  # remove container
  for c in ${CONTAINERS[@]}; do
    echo "stopping container $c"
    $DOCKER stop $c && $DOCKER rm $c
  done
}

# watch progress
# TODO: move to inotify
progress () {
  current=0
  if [ ! -z $progress ]
  then
    echo
    source $BASE_DIR/.progressbar.sh || exit 2
    until [ $current -eq $num ]; do
      current=$(ls $WORK_DIR/tei | wc -l)
      lastFile=$(ls -t $WORK_DIR/tei | head -1 | cut -c 1-12)
      progressbar "$(date +'%T') :: $current / $num :: $lastFile" $current $num
      sleep 0.5s
    done
  else
    until [ $current -eq $num ]; do
      current=$(ls $WORK_DIR/tei | wc -l)
      echo -n "\r$current / $num"
      sleep 1s
    done
    echo
  fi
}

trap 'echo "SIGINT received! Terminatingâ€¦"; log; stopContainer;' SIGINT SIGTERM

WORK_DIR=$(mktemp -d /tmp/tc2dracor-XXXXXX)
mkdir -p $WORK_DIR/tei
echo "Temporary directory: $WORK_DIR"

# spin up database containers unless PORT was specified
if [[ -z $PORT ]]; then
  for port in ${PORTS[@]}; do
    echo -n "starting db at port $port "
    id=$($DOCKER run --volume $WORK_DIR:/tc2dracor:z -p $port:8080 --detach existdb/existdb:5.2.0)
    CONTAINERS+=($id)
    echo "($id)"
  done
fi

echo ${CONTAINERS[*]} > $WORK_DIR/container

# wait for the first engine to be ready
# about 3 minutes for 6 instances
echo "waiting for instances to be ready..."
for port in ${PORTS[@]}; do
  echo -n "localhost:$port "
  while [[ $(curl -I -s http://localhost:$port | grep -c "200 OK") -eq "0" ]]; do
    echo -n "."
    sleep 1s
  done
  echo " ready"
done

echo "$(date +'%T') :: ready"

# FIXME: cleanup before using existing database
# if ! [[ -z $PORT ]]; then
#   echo "Cleanup???"
# fi

# put scripts to the databases
for port in ${PORTS[@]}; do
  echo "Putting scripts on localhost:$port"
  for file in $BASE_DIR/tc2dracor.xq; do
    [ -z $VERBOSE ] || echo "$file"
    name=$(basename $file)
    curl -X PUT \
      -H 'Content-Type: application/xquery' \
      --data-binary @$file \
      http://admin:@localhost:$port/exist/rest/db/tc2dracor/$name
  done
  for file in $BASE_DIR/ids.xml; do
    [ -z $VERBOSE ] || echo "$file"
    name=$(basename $file)
    curl -X PUT -H 'Content-Type: application/xml' \
      --data-binary @$file \
      http://admin:@localhost:$port/exist/rest/db/tc2dracor/$name
  done
  echo "done"
done

numSourceFiles=$(ls $SOURCE_DIR | wc -l)
echo "$(date +'%T') :: processing $numSourceFiles files"

# distribute source data to the databases
# about 3 minutes
distribute () {
  instance=$1
  let n=instance-1
  port=${PORTS[$n]}
  echo "uploading files to localhost:$port ($instance)"
  for i in $(seq $instance ${#PORTS[@]} $num); do
    if [ ! -z $TEST_MODE ]; then
      # take the smallest files in test mode
      file=$(ls -Sr $SOURCE_DIR | head -$i | tail -1)
    else
      # alphanumeric order
      file=$(ls $SOURCE_DIR | head -$i | tail -1)
    fi
    echo "$instance $i $file"
    curl -X PUT \
      -H 'Content-Type: application/xml' \
      --data-binary @$SOURCE_DIR/$file \
      http://admin:@localhost:$port/exist/rest/db/tc2dracor/sources/$file;
  done
}

if [ ! -z $TEST_MODE ]; then
  num=23 # take only a few files
else
  num=$numSourceFiles
fi

numports=${#PORTS[@]}

for i in $(seq 1 $numports); do
  distribute $i &
done

wait

echo "$(date +'%T') :: distribution done"

# transform source data
# about 50 minutes
echo "transforming data..."

transform () {
  port=$1
  if [[ -z $PORT ]]; then
    out=/tc2dracor/tei
  else
    out=$WORK_DIR/tei
  fi
  echo "start transformation on localhost:$port"
  curl --silent \
    http://admin:@localhost:$port/exist/rest/db/tc2dracor/tc2dracor.xq?out=$out \
    > /dev/null
}

for port in ${PORTS[@]}; do
  transform $port &
done

#progress &

wait > /dev/null

echo "$(date +'%T') :: transformation done."

# import new files to THIS repo
cp $WORK_DIR/tei/*.xml $TEI_DIR/

# terminate
log
stopContainer

echo "$(date +'%T') :: all done"

exit 0
